Step a: 
Function selected: 
(define (same lizt1 lizt2)
(cond
    ((null? lizt1) (null? lizt2))
        ((null? lizt2) #f)
        ((eq? (car lizt1) (car lizt2))
        (same (cdr lizt1) (cdr lizt2)))
    (else #f)
    )
)

Translation: 
Line 1: Function header
Line 2: if
Line 3: Edge case: Are both lists empty? If so, true. 
Line 4: Edge case 2: If only one of the lists is empty, return false. 

Line 5/6
((eq? (car lizt1) (car lizt2)) (same (cdr lizt1) (cdr lizt2))) - 
If the first elements of lizt1 and lizt2 are the same, it recursively calls the same function with the rest of the lists ((cdr lizt1) and (cdr lizt2)).

Line 7:
If it makes it here, return false. 

Close program

B: 
Branden: Clojure
Rob: Common Lisp
5 nontrivial cases

C: Both work on Haskell
5 nontrivial cases

D: Both work on Scala
3 nontrivial cases

Extra bits at end of document: 
E Follow the same protocols and functional semantics of the code from step A when possible.
1 If a name conflicts with a reserved word, rename it based on conventions (for example, lizt instead of list).
2 When possible, use a generic type. Otherwise, choose a homogeneous non-generic type instead.
3 When comparing two values for equality, use any suitable equality semantics.
4 Don’t redesign the code to use the imperative paradigm.
5 Don’t use any library function which replicates the function you’re translating.
6 Don’t use iteration. Use recursion as defined.
7 Don’t introduce any new side effects. Don’t use any user input or global variables.
